Different things to keep in mind:
User still has access to file not in f_dict or hardware -> throw error that file was unexpectedly deleted



user1 wants info -> ID1 not in ID_dictionary, abort [should load file]

user1 loads file1: 
	file1 placed into file dictionary 
	name placed into ID dictionary -> points to file1 in file dictionary
	timer_ID1 activated to remove ID1 from ID_dict
	timer_F1 activated to remove file1 from f_dict

user2 wants info -> ID2 not in ID_dict, abort [should load file]

user2 loads file1: 
	file1 already placed in f_dict, no change
	ID2 placed into ID_dict -> points to file1 in f_dict
	timer_ID2 activated to remove ID2 from ID_dict
	timer_F1 reset
	
user1 makes change to f1:
	timer_ID1 reset
	timer_F1 reset
	f1 changed in f_dict
	f1 saved to hardware
	
user2 makes change to f1:
	timer_ID2 reset
	timer_F1 reset
	f1 changed in f_dict
	f1 saved to hardware
	
user2 loads file2:
	f2 placed into f_dict
	ID2 already placed into ID_dict -> set to point to file2 in f_dict
	timer_ID2 reset
	timer_F2 activated to remove f2 from f_dict
	
timer_F1 runs out:
	f1 removed from f_dict
	timer_F1 destroyed

user1 makes change to f1:
	timer_ID1 reset
	f1 loaded to f_dict, since ID1 points to it, but it is not in f_dict
	timer_F1 started
	f1 changed in f_dict
	f1 saved to hardware
	
timer_ID2 runs out, ID2 removed from ID_dictionary	

user3 loads f1:
	ID3 added to ID_dict pointing to f1
	timer_ID3 started
	f1 already in f_dict
	user3 not authorized to access f1-> error thrown, timer_ID3 removed, ID3 removed from ID_dict, f1 stays in f_dict
	
file1 deleted on hardware, but still in f_dict

user1 makes change to f1:
	ID1 already in ID_dict
	f1 changed in f_dict
	timer_ID1 reset
	timer_F1 reset
	f1 saved to hardware
	
 